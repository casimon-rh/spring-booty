<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.konoha</groupId>
	<artifactId>backendninja</artifactId>
	<version>0.0.2</version>
	<packaging>war</packaging>

	<name>backendninja</name>
	<description>El proyecto del curso</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.2.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<gulp.output.directory>target/gulp/build</gulp.output.directory>
		<baseurl>http://localhost:8080/backendninja</baseurl>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<warSourceExcludes>
					node_modules/**,
					build/**,
					cache/**,
					resources/node_modules/**,
					resources/build/**,
					resources/cache/**
					</warSourceExcludes>
					<webResources>
						<resource>
							<directory>${gulp.output.directory}</directory>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.3.2</version>
				<executions>
					<execution>
						<id>npm install (initialize)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>initialize</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
								<argument>--prefix</argument>
								<argument>./src/main/resources</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Required: The following will ensure `npm install` is called before 
						anything else during the 'Clean Lifecycle' -->
					<execution>
						<id>npm install (clean)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>pre-clean</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
								<argument>--prefix</argument>
								<argument>./src/main/resources</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Optional: The following will output the npm configuration. I do 
						this so my CI logs will show the npm information used for the build -->
					<execution>
						<id>npm config list (validate)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>validate</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>config</argument>
								<argument>list</argument>
								<argument>--prefix</argument>
								<argument>./src/main/resources</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Required: This following calls `npm run build` where 'build' is 
						the script name I used in my project, change this if yours is different -->
					<execution>
						<id>npm run build (compile)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>compile</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>build</argument>
								<argument>--prefix</argument>
								<argument>./src/main/resources</argument>
							</arguments>
							<environmentVariables>
								<key>BASE_URL</key>
								<value>${baseurl}</value>
							</environmentVariables>
						</configuration>
					</execution>

					<!-- Optional: The following runs the script that copies the appropriate 
						files from the npm build directory into the location 'maven-war-plugin' is 
						expecting. The copying could be done during the 'build' script, but I like 
						to keep it separate. Idealy in the future, I won't need maven at which, I 
						can just delete the 'prepare-for-maven-war' script. -->
					<execution>
						<id>npm run prepare-for-maven (prepare-package)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>prepare-package</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>prepare-for-maven-war</argument>
								<argument>--prefix</argument>
								<argument>./src/main/resources</argument>
							</arguments>
						</configuration>
					</execution>

				</executions>

				<configuration>
					<environmentVariables>
						<!-- The following parameters create an NPM sandbox for CI -->
						<NPM_CONFIG_PREFIX>${basedir}/src/main/resources/</NPM_CONFIG_PREFIX>
						<NPM_CONFIG_CACHE>${NPM_CONFIG_PREFIX}/cache</NPM_CONFIG_CACHE>
						<NPM_CONFIG_TMP>${project.build.directory}/npmtmp</NPM_CONFIG_TMP>
					</environmentVariables>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
